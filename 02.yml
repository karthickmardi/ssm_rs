- hosts: localhost
  gather_facts: no
  vars:
    region: "us-west-2"  # Change to desired region
    account_ids:
      - "714949071610"
      - "974553378902"
      - "442868247538"
      # Add more account IDs here

  tasks:
    - name: Assume AWS role and retrieve temporary credentials
      command: >
        aws sts assume-role
        --role-arn 'arn:aws:iam::673443487762:role/TechMCrossAccountAutomation'
        --role-session-name 'test'
      register: assume_role_output

    - name: Save temporary credentials as facts
      set_fact:
        aws_access_key: "{{ assume_role_output.stdout | from_json | json_query('Credentials.AccessKeyId') }}"
        aws_secret_access_key: "{{ assume_role_output.stdout | from_json | json_query('Credentials.SecretAccessKey') }}"
        aws_session_token: "{{ assume_role_output.stdout | from_json | json_query('Credentials.SessionToken') }}"

    - name: Create directory for patch reports
      file:
        path: /home/ec2-user/ssm/ssm_rs
        state: directory

    - name: Get Patch Report for each account
      environment:
        AWS_ACCESS_KEY_ID: "{{ aws_access_key }}"
        AWS_SECRET_ACCESS_KEY: "{{ aws_secret_access_key }}"
        AWS_SESSION_TOKEN: "{{ aws_session_token }}"
      shell: |
        #!/bin/bash

        for account_id in "{{ account_ids }}"; do
          output_file="/home/ec2-user/ansible/ssm/ssm_rs/patch_report_${account_id}"
          printf "+-----------------+-------------------------+---------------+---------------+--------------------+----------+-------------------------+---------------+--------------------+--------------------+---------------------------+---------------------------+---------------------------+---------------------------+---------------------------+---------------------------+\n" > "$output_file"
          printf "|%-17s|%-25s|%-15s|%-15s|%-20s|%-10s|%-25s|%-15s|%-20s|%-20s|%-30s|%-30s|%-30s|%-30s|%-30s|%-30s|\n" "Instance ID" "Instance Name" "Instance IP" "Platform Name" "Platform Version" "SSM Version" "Patch Baseline" "Patch Group" "Compliance Status" "Compliance Severity" "Noncompliant Critical Count" "Noncompliant High Count" "Noncompliant Medium Count" "Noncompliant Low Count" "Noncompliant Informational Count" "Noncompliant Unspecified Count" >> "$output_file"
          printf "+-----------------+-------------------------+---------------+---------------+--------------------+----------+-------------------------+---------------+--------------------+--------------------+---------------------------+---------------------------+---------------------------+---------------------------+---------------------------+---------------------------+\n" >> "$output_file"

          # Get the instances with SSM patch compliance data for the account
          instance_ids=$(aws ec2 describe-instances --region "{{ region }}" --query 'Reservations[].Instances[].InstanceId' --output text --profile "account_id")

          # Iterate over each instance and retrieve data
          for instance_id in $instance_ids; do
            instance_name=$(aws ec2 describe-instances --region "{{ region }}" --instance-ids $instance_id --query 'Reservations[].Instances[].Tags[?Key==`Name`].Value | [0]' --output text --profile "account_id")
            instance_ip=$(aws ec2 describe-instances --region "{{ region }}" --instance-ids $instance_id --query 'Reservations[].Instances[].PrivateIpAddress' --output text --profile "account_id")
            platform_name=$(aws ec2 describe-instances --region "{{ region }}" --instance-ids $instance_id --query 'Reservations[].Instances[].PlatformDetails' --output text --profile "account_id")
            platform_version=$(aws ssm describe-instance-information --region "{{ region }}" --instance-information-filter-list key=InstanceIds,valueSet=$instance_id --query 'InstanceInformationList[].PlatformVersion' --output text --profile "account_id")
            ssm_version=$(aws ssm describe-instance-information --region "{{ region }}" --instance-information-filter-list key=InstanceIds,valueSet=$instance_id --query 'InstanceInformationList[].AgentVersion' --output text --profile "account_id")
            patch_baseline=$(aws ssm describe-instance-patch-states --region "{{ region }}" --instance-id $instance_id --query 'BaselineId' --output text --profile "account_id")
            patch_group=$(aws ssm describe-instance-patch-states --region "{{ region }}" --instance-id $instance_id --query 'PatchGroup' --output text --profile "account_id")
            overall_compliance=$(aws ssm describe-instance-patch-states --region "{{ region }}" --instance-id $instance_id --query 'InstancePatchStates[0].OverallComplianceStatus' --output text --profile "account_id")
            if [[ $overall_compliance == "COMPLIANT" ]]; then
              compliance_status="Compliant"
            else
              compliance_status="Non-Compliant"
            fi
            compliance_severity=$(aws ssm describe-instance-patch-states --region "{{ region }}" --instance-id $instance_id --query 'InstancePatchStates[0].ComplianceData.PatchSeverity' --output text --profile "account_id")
            noncompliant_critical_count=$(aws ssm describe-instance-patch-states --region "{{ region }}" --instance-id $instance_id --query 'InstancePatchStates[0].NonCompliantCriticalCount' --output text --profile "account_id")
            noncompliant_high_count=$(aws ssm describe-instance-patch-states --region "{{ region }}" --instance-id $instance_id --query 'InstancePatchStates[0].NonCompliantHighCount' --output text --profile "account_id")
            noncompliant_medium_count=$(aws ssm describe-instance-patch-states --region "{{ region }}" --instance-id $instance_id --query 'InstancePatchStates[0].NonCompliantMediumCount' --output text --profile "account_id")
            noncompliant_low_count=$(aws ssm describe-instance-patch-states --region "{{ region }}" --instance-id $instance_id --query 'InstancePatchStates[0].NonCompliantLowCount' --output text --profile "account_id")
            noncompliant_informational_count=$(aws ssm describe-instance-patch-states --region "{{ region }}" --instance-id $instance_id --query 'InstancePatchStates[0].NonCompliantInformationalCount' --output text --profile "account_id")
            noncompliant_unspecified_count=$(aws ssm describe-instance-patch-states --region "{{ region }}" --instance-id $instance_id --query 'InstancePatchStates[0].NonCompliantUnspecifiedCount' --output text --profile "account_id")

            # Print instance data in the table format
            printf "|%-17s|%-25s|%-15s|%-15s|%-20s|%-10s|%-25s|%-15s|%-20s|%-20s|%-30s|%-30s|%-30s|%-30s|%-30s|%-30s|\n" "$instance_id" "$instance_name" "$instance_ip" "$platform_name" "$platform_version" "$ssm_version" "$patch_baseline" "$patch_group" "$compliance_status" "$compliance_severity" "$noncompliant_critical_count" "$noncompliant_high_count" "$noncompliant_medium_count" "$noncompliant_low_count" "$noncompliant_informational_count" "$noncompliant_unspecified_count" >> "$output_file"
          done

          # Print account ID and patch report
          printf "\nAccount ID: $account_id\n" >> "$output_file"
          cat "$output_file"
        done

    - name: Display Patch Reports
      debug:
        msg: "Patch reports: {{ lookup('fileglob', '/home/ec2-user/ansible/ssm/ssm_rs/patch_report_*') }}"
